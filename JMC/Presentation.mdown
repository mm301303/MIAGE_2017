# Pourquoi git ? 

On va faire un très bref explicatif de la raison de l'existence de git avant de rentrer plus particulièrement dans comment ça fonctionne.

Tout d'abord le nom, ça veut dire plus ou moins "connard" en anglais, et c'est un qualificatif qu'on utilisera assez souvent dans la pratique pour désigner les noms d'utilisateurs qui sortent quand on fait un git blame. Mais ça aussi, on verra les commandes après.

Git et un logiciel assez simple dans son fonctionnement, il a été créé par Linus Torvals, le créateur de linux entre autres, avec l'objectif de créer un gestionnaire de version de fichier pour soutenir le projet linux, ce qui est le cas depuis 2005.
Le but d'un gestionnaire de version de fichier est de conserver différentes versions du code source d'un projet ainsi que les différences entre ces versions.

# Comment ça marche ?

Je vais essayer de décrire très généralement mais assez précisement pour entrer dans ma pratique le principe de fonctionnement de git en tant que gestionnaire de version décentralisé : 

Il faut concevoir un projet dans le système de fichier comme un arbre. 
Cet arbre contient l'arborescence du projet et les différents fichiers à un instant donné. 
On peut choisir à tout moment de prendre un instantané de cet arbre, et de le stocker dans un historique sur la machine locale : c'est l'action de commit. le commit est un objet qui est lié au commit parent, ce qui crée une arborescence chronologique pour chaque fichier. Le commit porte une version pour chacun des fichiers par l'intermédiaire d'une somme de contrôle : un nombre qui varie à chaque modification. Git n'intégrera a un commit que les fichiers dont ce nombre a varé depuis ce dernier commit. 

Il est alors possible de revenir à la version sauvegardée, mais cette version de l'arbre n'est pas accessible aux autres développeurs sur le projet. 
On peut alors push ses commits : c'est l'action de les envoyer sur le serveur distant, qui mettra à jour les fichiers impactés par les changemements, soit qui ont une somme de controle différente.
Un autre développeur du projet pourra alors pull les modifications pour voir la version modifiée apparaitre dans son arborescence locale.

A partir d'ici, il est facile d'imaginer que le deuxieme développeur ait modifié le même fichier au même endroit que le premier développeur : s'il commit ses changements, il devra faire la mise à jour du fichier à la main, c'est ce qu'on appelle un conflit, et c'est l'action de merge à la main. Le merge est normalement assuré automatiquement par got si personne n'a modifié au même moment les mêmes parties de code.

Pour faciliter le travail en groupe, il existe une notion de branche qui permet "d'isoler" le travail des différents acteurs sur les différentes fonctionnalités.
Ces branches portent chacune un historique parallèle les unes aux autres, peuvent être crées "sur" un commit, peuvent être lergées entre elles.
On utilise généralement une branche nommée master (la branche par défaut) ou release pour porter la version fonctionnelle d'un projet, cad qu'on y mettra que du code fonctionnel à destination de la production/client/prof.

## Gitignore

Il est très probable que dans une équipe, on ait un développeur sur windows, un sur mac, et heureusement quelques-uns sous linux. 
Ces développeurs utilisent très certainement des IDE différents. Le problème qui se pose alors est que chaque changement sur le système de fichier ayant pour racine un dossier contenant un .git est suggéré en tant qu'ajout par ***git status***, et il est assez facile de se tromper et d'ajouter des fichiers non source (générés par l'OS ou par l'IDE), qui n'ont pas de raison d'être sur le serveur distant.

Pour éviter ce problème il existe l'outil gitignore, c'est un fichier texte caché qu'on nomme ".gitignore", et qui contient les noms de fichiers dans l'arborescence relative du git, et éventuellement des regex pour ignorer plusieurs fichiers.

Le gitignore est un fichier, une fois commit sur le serveur distant, il gardera le répertoire propre des fichiers qu'il mentionne.

Astuce sympa pour les utilisateurs Mac (et les convaincus de leur IDE)
	git config --global core.excludesfile '~/.gitignore'
	On peut stocker quelque part un fichier gitignore global, afin par exemple de ne plus jamais avoir à se soucier des .DS_Store...

# Partie technique : la théorie 
 
Il n'est pas nécessaire pour travailler sur git de se servir couramment chaque commande et option de l'outil, mais seulement d'en connaitre le fonctionnement des principales.

Dans l'ordre d'utilisation (autant que possible), voici les commandes suffisantes pour se servir des fonctionnalités principales de l'outil :

Paramétrage :

	git config --global user.name "jean jacques"
	git config --global user.email jeanjacques@example.com
	git config --list 

git command -h : permet d'obtenir de l'aide sur une commande


***git init*** : cree le dossier caché .git qui contient l'historique des versions

***git clone [url]*** :  permet de copier un répertoire git sur une machine locale (ainsi que l'adresse du serveur distant)

***git remote*** :  permet de connaitre (-v) et de set l'adresse du serveur distant (add origin [url]) 

***git fetch origin*** : permet de charger l'état du serveur distant sur l'arbre local : c'est le git pull des branches

***git status*** :  permet de connaitre l'état des fichiers par rapport au dernier commit en local (modification, addition, suggestion de fichier à suivre)

***git add*** : permet d'ajouter un fichier à l'arbre local (lequel ne contient que les fichiers ajoutés de cette manière)

***git remove [file1 file2...]*** : supprime le fichier des arbres distant et local. Ne supprime pas le fichier dans l'arborescence

***git commit*** : enregistre l'état des fichiers ajoutés dans l'arbre local avec un message (-m)

***git push*** : permet d'envoyer un commit sur une branche de l'arbre distant

***git pull*** : permet de merge l'arbre distant sur l'arbre local, équivalent à git fetch && git rebase

***git checkout*** : permet de créer une branche, ou de charger l'abre de la branche existante (locale ou distante) sur l'abre local.
[Moins essentiel

***git stash save/pop*** : permet de sauvegarder/restorer les changements en local sans les commit (afin d'avoir un répertoire propre avant de changer de branche par exemple)

***git revert*** : permet de commit les changements inverses d'un commit précédent

***git diff*** : affiche les modifications induites par un ou plusieurs commit

***git blame*** : permet de lister les auteurs de modifications sur un fichier

# Partie technique : la pratique

## Les commandes console 

Il est souvent plus efficace d'utiliser une interface graphique pour manipuler git sans erreur, laquelle permet de connaitre de maniere instantanée et dynamique les résultats des commandes git status et git fetch, soit l'état de l'abre local et de l'abre distant sous forme graphique et non textuelle. 
En simplifié, une interface pour git aide à ne pas oublier de pull.
De plus, ça permet de naviguer plus facilement dans les branches et les différences entre les commits. 


## Les conflits

Les conflits sur git, c'est pas une fatalité, c'est une perte de temps liée a une mauvaise utilisation du logiciel.
Ca arrive quand on merge une branche sur une autre branche qui porte un élément modifié sur chacune des deux entre temps. 
La réponse la plus simple, mais pas forcément la meilleure c'est : 

```

on pull avant de push, du coup le premier a push est le moins embêté. 

```

C'est vrai, mais ça pose deux problèmes, le plus rapide n'a pas nécessairement le meilleur code, et une personne a bossé pour rien. 
Une bonne réaction est de créer des branches "fonctionnelles", qui correspondent chacune à une fonctionnalité métier, et de se les répartir afin d'éviter les conflits de fichiers dans la majorité des cas. 

Le meilleur moyen d'éviter les conflits et de communiquer régulièrement avec son équipe afin d'être conscient de qui travaille sur quelle fonctionnalité et quelle branche. Ainsi vous pourrez trouver un propre petit coin calme ou personne ne vient écraser votre code et ou vous n'écrasez le code de personne : 
vous pouvez travailler sans vous soucier des conflits éventuels.

## La qualité et les pull requests

Git est un outil de gestion de version décentralisé, et donc par nature collaboratif. Il offre une fonctionnalité qui complète à mon sens très bien les notions que l'on vient d'aborder.
Quand un développeur, sur sa branche, vient de finir une fonctionnalité, que tout est parfait pour lui, il a des tests, de la doc etc, il peut alors faire une pull request depuis le site web de son hébergeur git. 
Une pull request c'est un mail qui part chez tous les collaborateurs, et un lien qui leur permet de lire les modifications de tous les commits sur la branche. Ainsi, on diminue énormément les chances de faire passer une erreur, une incompréhension sur la branche master, et ainsi on économise de précieuses heures de débug tout en mettant au courant l'équipe de son avancement.
La pull request est validée, ou commentée et invalidée par chaque collaborateur, et sera mergée sur la branche principale après l'approbation de tous.


# Comment "bien" utiliser git 

On a vu pourquoi l'outil existe, on a vu en quoi il était efficace et on a fait une petite description de comment l'utiliser, soit à peu près comment éviter les problèmes. 
Maintenant on va se poser la question de comment retirer une plus forte valeur ajoutée de l'outil, ce qu'on pourrait dire plus simplement par comment "bien" utiliser git.

Le plus simple pour aborder cet aspect est par une liste de conseils et des motivations de ces conseils.

* TOUJOURS renseigner ses commit avec un message court et précis pour désigner la nature des modifications, afin de permettre une recherche rapide dans les logs par la suite. Il peut-être intéressant de (re)lire le résultat de ***git diff*** pour s'aider à écrire le message le plus cohérent possible.

*  Commit fréquemment et à chaque fois que ça en vaut la peine, c'est à dire quand une unité de code est terminée, aussi petite soit-elle

* Se tenir à jour des évolutions du code, et du travail des autres développeurs : cela permet de minimiser la fréquence des conflits

* Partager fréquemment les changements sur le serveur. Une fois avoir terminé une unité fonctionnelle cohérente (et testée), il est également intéressant pour minimiser les conflits de la partager aux autres développeurs afin qu'ils puissent se tenir à jour.

* Communiquer ailleurs que sur git avec son équipe, afin de pouvoir se coordonner plus facilement et éviter de se marcher sur les branches(/pieds)


# Git flow ou comment forcer un git à être super propre

Git flow est une petite surcouche à git qui s'installe, et qui organise les branches d'un répertoire. On utilise uniquement git pull, push et commit en parallèle.

Le fonctionnement s'exlique assez simplement :

## Developper

On commence sur une branche "develop"
On peut alors s'attaquer à une fonctionnalité on tape la commande :

```

git flow feature start MYFEATURE

```

Une branche feature/MYFEATURE est alors créée. Une fois la feature terminée, codée et testée, on peut la terminer, on fait alors

```

git flow feature finish MYFEATURE

```

Ces opérations sont locales, on peut choisir de publier la fonctionnalité pour les autres développeurs

```

git flow feature publish MYFEATURE

```

qui pourront alors la pull depuis le serveur et travailler dessus 

```

git flow feature pull origin MYFEATURE 

```


## Livrer

Une fois la fonctionnalité testée et bienavancée, on peut envisager de la livrer
c'est l'action de créer une branche de livraison basée sur la branche de développement au moyen de la commande :

```

git flow release start RELEASE [BASE] 

```
Vous pouvez si besoin ajouter le paramètre [BASE], le hash d'un commit à partir duquel commencera la livraison. Ce commit doit faire partie de la branche de développement.


On peut alors publier la livraiso avec la commande 

```

git flow release publish RELEASE 

```


## Déployer

Pour déployer la livraison on utilise 


```

git flow release publish RELEASE 

```

## Réparer (vite) : Hotfix

Les correctifs sont utiles quand il est nécessaire de corriger immédiatement l'état incorrect de la version en production

git flow hotfix start VERSION [NomDeLaRealeaseSiPlusieurs]

En terminant un hotfix, il est fusionné dans les branches 'develop' et 'master'. De plus la fusion vers 'master' est etiquetée par la version du hotfix.

git flow hotfix finish VERSION 

## Diagramme git flow

<img src="https://danielkummer.github.io/git-flow-cheatsheet/img/git-flow-commands.png">


# Pourquoi c'est bien

***Pour l'emploi*** : Mettez vous à la place d'un employeur, vous avez deux candidats potentiels avec les mêmes capacités techniques a priori dans 3 techno utilisées dans votre entreprise. L'un a un git avec 5 projets utilisants les technlogies en question, l'autre un CV. Dans un cas, l'évaluation du niveau du candidat est fiable est disponible dans un cas, subjective dans l'autre. 

***Le travail en groupe est inalienable a la condition de développeur*** si on est pas freelance : Actuellement, git est extrèmement utilisé du fait de sa gratuité, de son efficacité et de sa simlicité relative d'utilisation relativement aux deux points précédents. 

***Automatisation des tests*** : dans les grosses structures et pour les projets bien mis en place, on retrouve fréquemment es mécanismes d'intégration continue, en particulier dans l'open source et les projets de grande envergure, par exemple linux ou mozilla. L'automatisation de test à chaque merge et l'utilisation de pull request permet d'intégrer uniquement le code validé par les tests en provenance de tout contributeur.

Efficacité du travail de groupe : Dans un système d'information, la ***rapidité de transmission de l'information*** est directement proportionnelle à l'efficacité du de ce système d'information.
En vérité une équipe c'est un système d'information, et git est un outil qui permet de transmettre instantanément des fichiers cohérents à une ou plusieurs personne et réciproquement, et donc une forte plusvalue dans l'efficacité d'un groupe.

# Conclusion

En conclusion je dirai simplement que je n'ai fait aucune mention de quelconques reset -f (ni de -f tout court), c'est pour deux bonnes raisons : car à part situation très particulières on peut faire n'importe quelle opération pour récupérer des changements préalables avec les commandes citées précedemment, et car git est un gestionnaire de version, on a a priori pas de raison d'en supprimer du contenu, et toute action destructive peut comprommettre l'accés à certaines versions. 
